import { prisma } from '@/lib/prisma'

// AI Service Types
interface AIConsultationInput {
  petId: string
  symptoms: string
  duration: string
  photos?: string[]
  petAge: number
  petBreed: string
  petSpecies: string
  language: string
  context?: string // Additional context like recent changes, environment, etc.
}

interface SymptomAnalysis {
  severity: 'low' | 'medium' | 'high' | 'emergency'
  urgency: number // 1-10 scale
  shouldSeeVet: boolean
  estimatedCauses: string[]
  recommendations: string[]
  nextSteps: string[]
  homeRemedies: string[]
  emergencyActions: string[]
  confidence: number
  reasoning: string
}

interface AIPhotoAnalysis {
  petHealth: {
    mood: string
    activity: string
    healthNotes: string
    weightEstimate?: string
    coatCondition?: string
    bodyLanguage?: string
  }
  activity: string
  tags: string[]
  healthAlerts: string[]
  recommendations: string[]
  confidence: number
}

interface AIExpenseAnalysis {
  category: string
  amount: number
  description: string
  merchant: string
  confidence: number
  breakdown?: string
}

export class AIService {
  private static instance: AIService
  private modelEndpoint = process.env.AI_MODEL_ENDPOINT || 'http://localhost:11434'
  private modelName = process.env.AI_MODEL_NAME || 'llama3.1:8b'
  private isLocalModel = process.env.AI_USE_LOCAL === 'true'

  static getInstance(): AIService {
    if (!AIService.instance) {
      AIService.instance = new AIService()
    }
    return AIService.instance
  }

  // Main consultation method - generates unique AI responses
  async analyzePetSymptoms(input: AIConsultationInput): Promise<SymptomAnalysis> {
    // Check for emergency symptoms first
    const emergencyCheck = this.checkEmergencySymptoms(input.symptoms, input.language)
    if (emergencyCheck.isEmergency) {
      return this.createEmergencyResponse(input.language, emergencyCheck.symptoms)
    }

    // Generate AI analysis
    try {
      const aiAnalysis = await this.generateAIAnalysis(input)
      return aiAnalysis
    } catch (error) {
      console.error('AI analysis failed:', error)
      // Fallback to basic emergency response
      return this.createEmergencyResponse(input.language, ['–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'])
    }
  }

  // Photo analysis with AI
  async analyzePetPhoto(imageUrl: string, petInfo: { species: string, breed: string }): Promise<AIPhotoAnalysis> {
    try {
      const prompt = this.buildPhotoAnalysisPrompt(imageUrl, petInfo)
      const response = await this.callAIModel(prompt)
      
      return this.parsePhotoAnalysisResponse(response, petInfo)
    } catch (error) {
      console.error('Photo analysis error:', error)
      return this.getDefaultPhotoAnalysis(petInfo)
    }
  }

  // Expense analysis with AI
  async analyzeExpenseReceipt(imageUrl: string): Promise<AIExpenseAnalysis> {
    try {
      const prompt = this.buildExpenseAnalysisPrompt(imageUrl)
      const response = await this.callAIModel(prompt)
      
      return this.parseExpenseAnalysisResponse(response)
    } catch (error) {
      console.error('Expense analysis error:', error)
      return {
        category: 'other',
        amount: 0,
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å',
        merchant: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        confidence: 0
      }
    }
  }

  // Private methods
  private checkEmergencySymptoms(symptoms: string, language: string): { isEmergency: boolean, symptoms: string[] } {
    const emergencyKeywords = language === 'ru' ? [
      '–∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ', '–∫—Ä–æ–≤—å', '—Å—É–¥–æ—Ä–æ–≥–∏', '–±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è', '–∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ',
      '—É–¥—É—à—å–µ', '–æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Ç–æ–∫—Å–∏—á–Ω—ã–π', '–Ω–µ –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å', '–ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω',
      '–æ–ø—É—Ö—à–∏–π', '—Ä–≤–æ—Ç–∞ –∫—Ä–æ–≤—å—é', '–ø–æ–Ω–æ—Å —Å –∫—Ä–æ–≤—å—é', '—Å–±–∏–ª–∞ –º–∞—à–∏–Ω–∞', '–∞–≤–∞—Ä–∏—è', '—Ç—Ä–∞–≤–º–∞',
      '–ø–µ—Ä–µ–ª–æ–º', '–æ–∂–æ–≥', '–æ–±–º–æ—Ä–æ–∂–µ–Ω–∏–µ', '—Ç–µ–ø–ª–æ–≤–æ–π —É–¥–∞—Ä', '–≥–∏–ø–æ—Ç–µ—Ä–º–∏—è'
    ] : [
      'bleeding', 'blood', 'seizure', 'unconscious', 'difficulty breathing',
      'choking', 'poisoning', 'toxic', 'can\'t walk', 'paralyzed', 'swollen'
    ]

    const foundEmergencies = emergencyKeywords.filter(keyword => 
      symptoms.toLowerCase().includes(keyword)
    )

    return {
      isEmergency: foundEmergencies.length > 0,
      symptoms: foundEmergencies
    }
  }

  private createEmergencyResponse(language: string, symptoms: string[]): SymptomAnalysis {
    const severity = 'emergency'
    const urgency = 10
    const shouldSeeVet = true

    if (language === 'ru') {
      return {
        severity,
        urgency,
        shouldSeeVet,
        estimatedCauses: ['–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, —Ç—Ä–µ–±—É—é—â–∞—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏'],
        recommendations: [
          'üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–ë–†–ê–¢–ò–¢–ï–°–¨ –ö –í–ï–¢–ï–†–ò–ù–ê–†–£',
          '–ó–≤–æ–Ω–∏—Ç–µ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –≤–µ—Ç–∫–ª–∏–Ω–∏–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å',
          '–ù–µ –∂–¥–∏—Ç–µ - —ç—Ç–æ –º–æ–∂–µ—Ç —É–≥—Ä–æ–∂–∞—Ç—å –∂–∏–∑–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞'
        ],
        nextSteps: [
          '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–æ–º',
          '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ',
          '–í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö'
        ],
        homeRemedies: ['–ù–ï –ü–´–¢–ê–ô–¢–ï–°–¨ –õ–ï–ß–ò–¢–¨ –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–û'],
        emergencyActions: [
          '–û–±–µ—Å–ø–µ—á—å—Ç–µ –ø–æ–∫–æ–π –ø–∏—Ç–æ–º—Ü—É',
          '–ù–µ –¥–∞–≤–∞–π—Ç–µ –µ–¥—É –∏ –≤–æ–¥—É',
          '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'
        ],
        confidence: 0.95,
        reasoning: `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã: ${symptoms.join(', ')}. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å.`
      }
    }

    return {
      severity,
      urgency,
      shouldSeeVet,
      estimatedCauses: ['Emergency situation requiring immediate care'],
      recommendations: [
        'üö® SEEK IMMEDIATE VETERINARY CARE',
        'Call emergency vet clinic now',
        'Do not wait - this could be life-threatening'
      ],
      nextSteps: [
        'Contact emergency vet immediately',
        'Prepare for safe transportation',
        'Bring medications or recent change information'
      ],
      homeRemedies: ['DO NOT ATTEMPT SELF-TREATMENT'],
      emergencyActions: [
        'Keep pet calm and comfortable',
        'Do not give food or water',
        'Prepare for transport'
      ],
      confidence: 0.95,
      reasoning: `Emergency symptoms detected: ${symptoms.join(', ')}. Immediate professional care required.`
    }
  }

  private async generateAIAnalysis(input: AIConsultationInput): Promise<SymptomAnalysis> {
    const prompt = this.buildVetPrompt(input)
    const response = await this.callAIModel(prompt)
    return this.parseAIResponse(response, input.language)
  }

  private buildVetPrompt(input: AIConsultationInput): string {
    if (input.language === 'ru') {
      return `–¢—ã –æ–ø—ã—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –≤—Ä–∞—á —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏–º–ø—Ç–æ–º—ã –ø–∏—Ç–æ–º—Ü–∞ –∏ –¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ò–¢–û–ú–¶–ï:
- –í–∏–¥: ${input.petSpecies}
- –ü–æ—Ä–æ–¥–∞: ${input.petBreed}
- –í–æ–∑—Ä–∞—Å—Ç: ${input.petAge} –ª–µ—Ç
- –°–∏–º–ø—Ç–æ–º—ã: ${input.symptoms}
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${input.duration}
${input.context ? `- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${input.context}` : ''}

–ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô –ò –û–¢–í–ï–¢–¨ –í –°–õ–ï–î–£–Æ–©–ï–ú –§–û–†–ú–ê–¢–ï:

–¢–Ø–ñ–ï–°–¢–¨: [–Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è/—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è]
–°–†–û–ß–ù–û–°–¢–¨: [1-10]
–ù–£–ñ–ï–ù_–í–†–ê–ß: [–¥–∞/–Ω–µ—Ç]
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: [0.1-1.0]
–†–ê–°–°–£–ñ–î–ï–ù–ò–ï: [–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞]
–ü–†–ò–ß–ò–ù–´: [3-5 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è]
–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: [3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞]
–°–õ–ï–î–£–Æ–©–ò–ï_–®–ê–ì–ò: [3-5 —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π]
–î–û–ú–ê–®–ù–ò–ï_–°–†–ï–î–°–¢–í–ê: [2-3 –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞]
–≠–ö–°–¢–†–ï–ù–ù–´–ï_–î–ï–ô–°–¢–í–ò–Ø: [2-3 –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏]

–í–ê–ñ–ù–û:
- –ë—É–¥—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ
- –£—á–∏—Ç—ã–≤–∞–π –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ—Ä–æ–¥—É –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
- –í—Å–µ–≥–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –ø—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö
- –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
- –û–±—ä—è—Å–Ω—è–π —Å–≤–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ

–ö–û–ù–ï–¶_–ê–ù–ê–õ–ò–ó–ê`
    }

    return `You are an experienced veterinarian with 20 years of practice. Analyze the pet's symptoms and provide professional consultation.

PET INFORMATION:
- Species: ${input.petSpecies}
- Breed: ${input.petBreed}
- Age: ${input.petAge} years
- Symptoms: ${input.symptoms}
- Duration: ${input.duration}
${input.context ? `- Additional context: ${input.context}` : ''}

ANALYZE AND RESPOND IN THE FOLLOWING FORMAT:

SEVERITY: [low/medium/high/emergency]
URGENCY: [1-10]
VET_NEEDED: [yes/no]
CONFIDENCE: [0.1-1.0]
REASONING: [detailed explanation of your analysis]
CAUSES: [3-5 possible causes, unique to this case]
RECOMMENDATIONS: [3-5 specific recommendations for this pet]
NEXT_STEPS: [3-5 next actions]
HOME_REMEDIES: [2-3 safe home remedies]
EMERGENCY_ACTIONS: [2-3 actions if condition worsens]

IMPORTANT:
- Be unique in each response
- Consider age, breed, and individual characteristics
- Always recommend vet for serious symptoms
- Give practical, specific advice
- Explain your reasoning

END_ANALYSIS`
  }

  private buildPhotoAnalysisPrompt(imageUrl: string, petInfo: { species: string, breed: string }): string {
    return `–¢—ã –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∂–∏–≤–æ—Ç–Ω—ã—Ö. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∏—Ç–æ–º—Ü–∞ –∏ –¥–∞–π –æ—Ü–µ–Ω–∫—É –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ò–¢–û–ú–¶–ï:
- –í–∏–¥: ${petInfo.species}
- –ü–æ—Ä–æ–¥–∞: ${petInfo.breed}
- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: ${imageUrl}

–ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô –ò –û–¢–í–ï–¢–¨ –í –§–û–†–ú–ê–¢–ï:

–ù–ê–°–¢–†–û–ï–ù–ò–ï: [–æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞]
–ê–ö–¢–ò–í–ù–û–°–¢–¨: [—á—Ç–æ –¥–µ–ª–∞–µ—Ç –ø–∏—Ç–æ–º–µ—Ü]
–°–û–°–¢–û–Ø–ù–ò–ï_–ó–î–û–†–û–í–¨–Ø: [–æ—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è]
–í–ï–°: [–æ—Ü–µ–Ω–∫–∞ –≤–µ—Å–∞ –ø–∏—Ç–æ–º—Ü–∞]
–°–û–°–¢–û–Ø–ù–ò–ï_–®–ï–†–°–¢–ò: [–æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–µ—Ä—Å—Ç–∏/–∫–æ–∂–∏]
–Ø–ó–´–ö_–¢–ï–õ–ê: [–∞–Ω–∞–ª–∏–∑ —è–∑—ã–∫–∞ —Ç–µ–ª–∞]
–¢–ï–ì–ò: [5-8 —Ç–µ–≥–æ–≤ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏]
–ó–î–û–†–û–í–¨–ï_–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: [–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–≤–æ–¥—ã –¥–ª—è –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞]
–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: [3-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É—Ö–æ–¥—É]
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: [0.1-1.0]

–ë—É–¥—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤ –∞–Ω–∞–ª–∏–∑–µ.
–ö–û–ù–ï–¶_–ê–ù–ê–õ–ò–ó–ê`
  }

  private buildExpenseAnalysisPrompt(imageUrl: string): string {
    return `–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —á–µ–∫–æ–≤ –∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞ –∏ –∏–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.

–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –ß–ï–ö–ê: ${imageUrl}

–ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô –ò –û–¢–í–ï–¢–¨ –í –§–û–†–ú–ê–¢–ï:

–ö–ê–¢–ï–ì–û–†–ò–Ø: [–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞]
–°–£–ú–ú–ê: [—Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö]
–û–ü–ò–°–ê–ù–ò–ï: [–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏]
–ú–ê–ì–ê–ó–ò–ù: [–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞/–∫–ª–∏–Ω–∏–∫–∏]
–†–ê–ó–ë–ò–í–ö–ê: [–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å]
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: [0.1-1.0]

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä, –∫–æ—Ä–º, –∏–≥—Ä—É—à–∫–∏, –≥—Ä—É–º–∏–Ω–≥, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –¥—Ä—É–≥–∏–µ
–ö–û–ù–ï–¶_–ê–ù–ê–õ–ò–ó–ê`
  }

  private async callAIModel(prompt: string): Promise<string> {
    if (!this.isLocalModel) {
      throw new Error('Local AI model not available')
    }

    // Get optimal configuration for unique responses
    const config = this.getOptimalConfig()
    
    // Add randomness to ensure unique responses
    const randomSeed = Date.now() + Math.random() * 1000
    const temperatureVariation = config.temperature + (Math.random() - 0.5) * 0.1
    const topPVariation = config.topP + (Math.random() - 0.5) * 0.05

    const response = await fetch(`${this.modelEndpoint}/api/generate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        model: this.modelName,
        prompt: prompt,
        stream: false,
        options: {
          temperature: Math.max(0.7, Math.min(0.9, temperatureVariation)), // Ensure unique responses
          top_p: Math.max(0.85, Math.min(0.98, topPVariation)),
          num_predict: config.maxTokens,
          num_ctx: config.contextLength,
          repeat_penalty: config.repeatPenalty,
          seed: randomSeed, // Random seed for unique responses
          top_k: 40, // Add top_k for more diversity
          tfs_z: 1.0, // Tail free sampling
          typical_p: 1.0, // Typical sampling
          mirostat: 2, // Mirostat for better response quality
          mirostat_tau: 5.0,
          mirostat_eta: 0.1
        }
      })
    })

    if (!response.ok) {
      throw new Error(`AI API error: ${response.status}`)
    }

    const data = await response.json()
    return data.response
  }

  private getOptimalConfig() {
    // Import configuration dynamically to avoid circular dependencies
    const { defaultAIConfig, MODEL_REQUIREMENTS } = require('./ai-config')
    
    const modelConfig = MODEL_REQUIREMENTS[this.modelName] || MODEL_REQUIREMENTS['llama3.1:3b']
    
    return {
      temperature: modelConfig.temperature || 0.85,
      topP: modelConfig.topP || 0.95,
      repeatPenalty: modelConfig.repeatPenalty || 1.3,
      maxTokens: modelConfig.maxTokens || 600,
      contextLength: modelConfig.contextLength || 1024
    }
  }

  private parseAIResponse(response: string, language: string): SymptomAnalysis {
    const lines = response.split('\n')
    const analysis: Partial<SymptomAnalysis> = {}

    lines.forEach(line => {
      const cleanLine = line.trim()
      
      if (language === 'ru') {
        if (cleanLine.startsWith('–¢–Ø–ñ–ï–°–¢–¨:')) {
          const severity = cleanLine.split(':')[1].trim().toLowerCase()
          analysis.severity = this.mapRussianSeverity(severity)
        } else if (cleanLine.startsWith('–°–†–û–ß–ù–û–°–¢–¨:')) {
          analysis.urgency = parseInt(cleanLine.split(':')[1].trim()) || 5
        } else if (cleanLine.startsWith('–ù–£–ñ–ï–ù_–í–†–ê–ß:')) {
          analysis.shouldSeeVet = cleanLine.split(':')[1].trim().toLowerCase() === '–¥–∞'
        } else if (cleanLine.startsWith('–£–í–ï–†–ï–ù–ù–û–°–¢–¨:')) {
          analysis.confidence = parseFloat(cleanLine.split(':')[1].trim()) || 0.5
        } else if (cleanLine.startsWith('–†–ê–°–°–£–ñ–î–ï–ù–ò–ï:')) {
          analysis.reasoning = cleanLine.split(':')[1].trim()
        } else if (cleanLine.startsWith('–ü–†–ò–ß–ò–ù–´:')) {
          analysis.estimatedCauses = cleanLine.split(':')[1].split(',').map(c => c.trim()).filter(c => c)
        } else if (cleanLine.startsWith('–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')) {
          analysis.recommendations = cleanLine.split(':')[1].split(',').map(r => r.trim()).filter(r => r)
        } else if (cleanLine.startsWith('–°–õ–ï–î–£–Æ–©–ò–ï_–®–ê–ì–ò:')) {
          analysis.nextSteps = cleanLine.split(':')[1].split(',').map(s => s.trim()).filter(s => s)
        } else if (cleanLine.startsWith('–î–û–ú–ê–®–ù–ò–ï_–°–†–ï–î–°–¢–í–ê:')) {
          analysis.homeRemedies = cleanLine.split(':')[1].split(',').map(r => r.trim()).filter(r => r)
        } else if (cleanLine.startsWith('–≠–ö–°–¢–†–ï–ù–ù–´–ï_–î–ï–ô–°–¢–í–ò–Ø:')) {
          analysis.emergencyActions = cleanLine.split(':')[1].split(',').map(a => a.trim()).filter(a => a)
        }
      } else {
        // English parsing
        if (cleanLine.startsWith('SEVERITY:')) {
          analysis.severity = cleanLine.split(':')[1].trim() as 'low' | 'medium' | 'high' | 'emergency'
        } else if (cleanLine.startsWith('URGENCY:')) {
          analysis.urgency = parseInt(cleanLine.split(':')[1].trim()) || 5
        } else if (cleanLine.startsWith('VET_NEEDED:')) {
          analysis.shouldSeeVet = cleanLine.split(':')[1].trim().toLowerCase() === 'yes'
        } else if (cleanLine.startsWith('CONFIDENCE:')) {
          analysis.confidence = parseFloat(cleanLine.split(':')[1].trim()) || 0.5
        } else if (cleanLine.startsWith('REASONING:')) {
          analysis.reasoning = cleanLine.split(':')[1].trim()
        } else if (cleanLine.startsWith('CAUSES:')) {
          analysis.estimatedCauses = cleanLine.split(':')[1].split(',').map(c => c.trim()).filter(c => c)
        } else if (cleanLine.startsWith('RECOMMENDATIONS:')) {
          analysis.recommendations = cleanLine.split(':')[1].split(',').map(r => r.trim()).filter(r => r)
        } else if (cleanLine.startsWith('NEXT_STEPS:')) {
          analysis.nextSteps = cleanLine.split(':')[1].split(',').map(s => s.trim()).filter(s => s)
        } else if (cleanLine.startsWith('HOME_REMEDIES:')) {
          analysis.homeRemedies = cleanLine.split(':')[1].split(',').map(r => r.trim()).filter(r => r)
        } else if (cleanLine.startsWith('EMERGENCY_ACTIONS:')) {
          analysis.emergencyActions = cleanLine.split(':')[1].split(',').map(a => a.trim()).filter(a => a)
        }
      }
    })

    return this.getDefaultAnalysis(language, analysis)
  }

  private parsePhotoAnalysisResponse(response: string, petInfo: { species: string, breed: string }): AIPhotoAnalysis {
    const lines = response.split('\n')
    const analysis: Partial<AIPhotoAnalysis> = {
      petHealth: {},
      tags: [],
      healthAlerts: [],
      recommendations: []
    }

    lines.forEach(line => {
      const cleanLine = line.trim()
      
      if (cleanLine.startsWith('–ù–ê–°–¢–†–û–ï–ù–ò–ï:')) {
        analysis.petHealth!.mood = cleanLine.split(':')[1].trim()
      } else if (cleanLine.startsWith('–ê–ö–¢–ò–í–ù–û–°–¢–¨:')) {
        analysis.petHealth!.activity = cleanLine.split(':')[1].trim()
        analysis.activity = cleanLine.split(':')[1].trim()
      } else if (cleanLine.startsWith('–°–û–°–¢–û–Ø–ù–ò–ï_–ó–î–û–†–û–í–¨–Ø:')) {
        analysis.petHealth!.healthNotes = cleanLine.split(':')[1].trim()
      } else if (cleanLine.startsWith('–í–ï–°:')) {
        analysis.petHealth!.weightEstimate = cleanLine.split(':')[1].trim()
      } else if (cleanLine.startsWith('–°–û–°–¢–û–Ø–ù–ò–ï_–®–ï–†–°–¢–ò:')) {
        analysis.petHealth!.coatCondition = cleanLine.split(':')[1].trim()
      } else if (cleanLine.startsWith('–Ø–ó–´–ö_–¢–ï–õ–ê:')) {
        analysis.petHealth!.bodyLanguage = cleanLine.split(':')[1].trim()
      } else if (cleanLine.startsWith('–¢–ï–ì–ò:')) {
        analysis.tags = cleanLine.split(':')[1].split(',').map(t => t.trim()).filter(t => t)
      } else if (cleanLine.startsWith('–ó–î–û–†–û–í–¨–ï_–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:')) {
        analysis.healthAlerts = cleanLine.split(':')[1].split(',').map(a => a.trim()).filter(a => a)
      } else if (cleanLine.startsWith('–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')) {
        analysis.recommendations = cleanLine.split(':')[1].split(',').map(r => r.trim()).filter(r => r)
      } else if (cleanLine.startsWith('–£–í–ï–†–ï–ù–ù–û–°–¢–¨:')) {
        analysis.confidence = parseFloat(cleanLine.split(':')[1].trim()) || 0.5
      }
    })

    return this.getDefaultPhotoAnalysis(petInfo, analysis)
  }

  private parseExpenseAnalysisResponse(response: string): AIExpenseAnalysis {
    const lines = response.split('\n')
    const analysis: Partial<AIExpenseAnalysis> = {}

    lines.forEach(line => {
      const cleanLine = line.trim()
      
      if (cleanLine.startsWith('–ö–ê–¢–ï–ì–û–†–ò–Ø:')) {
        analysis.category = cleanLine.split(':')[1].trim()
      } else if (cleanLine.startsWith('–°–£–ú–ú–ê:')) {
        analysis.amount = parseFloat(cleanLine.split(':')[1].trim()) || 0
      } else if (cleanLine.startsWith('–û–ü–ò–°–ê–ù–ò–ï:')) {
        analysis.description = cleanLine.split(':')[1].trim()
      } else if (cleanLine.startsWith('–ú–ê–ì–ê–ó–ò–ù:')) {
        analysis.merchant = cleanLine.split(':')[1].trim()
      } else if (cleanLine.startsWith('–†–ê–ó–ë–ò–í–ö–ê:')) {
        analysis.breakdown = cleanLine.split(':')[1].trim()
      } else if (cleanLine.startsWith('–£–í–ï–†–ï–ù–ù–û–°–¢–¨:')) {
        analysis.confidence = parseFloat(cleanLine.split(':')[1].trim()) || 0.5
      }
    })

    return {
      category: analysis.category || 'other',
      amount: analysis.amount || 0,
      description: analysis.description || '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å',
      merchant: analysis.merchant || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      confidence: analysis.confidence || 0,
      breakdown: analysis.breakdown
    }
  }

  private mapRussianSeverity(severity: string): 'low' | 'medium' | 'high' | 'emergency' {
    switch (severity) {
      case '–Ω–∏–∑–∫–∞—è': return 'low'
      case '—Å—Ä–µ–¥–Ω—è—è': return 'medium'
      case '–≤—ã—Å–æ–∫–∞—è': return 'high'
      case '—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è': return 'emergency'
      default: return 'medium'
    }
  }

  private getDefaultAnalysis(language: string, partial?: Partial<SymptomAnalysis>): SymptomAnalysis {
    const defaults = language === 'ru' ? {
      recommendations: ['–ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º', '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä—É'],
      nextSteps: ['–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä—É', '–û–±–µ—Å–ø–µ—á—å—Ç–µ –ø–æ–∫–æ–π –ø–∏—Ç–æ–º—Ü—É'],
      estimatedCauses: ['–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞'],
      homeRemedies: ['–û–±–µ—Å–ø–µ—á—å—Ç–µ –ø–æ–∫–æ–π', '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º'],
      emergencyActions: ['–ü—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∫ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä—É'],
      reasoning: '–ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤'
    } : {
      recommendations: ['Monitor symptoms', 'Contact veterinarian'],
      nextSteps: ['Schedule vet appointment', 'Keep pet comfortable'],
      estimatedCauses: ['Requires professional evaluation'],
      homeRemedies: ['Keep pet comfortable', 'Monitor condition'],
      emergencyActions: ['Seek vet immediately if condition worsens'],
      reasoning: 'Analysis based on provided symptoms'
    }

    return {
      severity: partial?.severity || 'medium',
      urgency: partial?.urgency || 5,
      shouldSeeVet: partial?.shouldSeeVet ?? true,
      recommendations: partial?.recommendations || defaults.recommendations,
      nextSteps: partial?.nextSteps || defaults.nextSteps,
      estimatedCauses: partial?.estimatedCauses || defaults.estimatedCauses,
      homeRemedies: partial?.homeRemedies || defaults.homeRemedies,
      emergencyActions: partial?.emergencyActions || defaults.emergencyActions,
      confidence: partial?.confidence || 0.5,
      reasoning: partial?.reasoning || defaults.reasoning
    }
  }

  private getDefaultPhotoAnalysis(petInfo: { species: string, breed: string }, partial?: Partial<AIPhotoAnalysis>): AIPhotoAnalysis {
    return {
      petHealth: {
        mood: partial?.petHealth?.mood || '—Å–ø–æ–∫–æ–π–Ω—ã–π',
        activity: partial?.petHealth?.activity || '–æ—Ç–¥—ã—Ö–∞–µ—Ç',
        healthNotes: partial?.petHealth?.healthNotes || '–ü–∏—Ç–æ–º–µ—Ü –≤—ã–≥–ª—è–¥–∏—Ç –∑–¥–æ—Ä–æ–≤—ã–º',
        weightEstimate: partial?.petHealth?.weightEstimate || '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å',
        coatCondition: partial?.petHealth?.coatCondition || '–•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
        bodyLanguage: partial?.petHealth?.bodyLanguage || '–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ'
      },
      activity: partial?.activity || '–æ—Ç–¥—ã—Ö–∞–µ—Ç',
      tags: partial?.tags || [petInfo.species, petInfo.breed, '–∑–¥–æ—Ä–æ–≤—ã–π'],
      healthAlerts: partial?.healthAlerts || [],
      recommendations: partial?.recommendations || ['–†–µ–≥—É–ª—è—Ä–Ω—ã–π —É—Ö–æ–¥', '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ'],
      confidence: partial?.confidence || 0.5
    }
  }

  // System health check
  async checkSystemHealth(): Promise<{
    isAvailable: boolean
    modelLoaded: boolean
    responseTime: number
    memoryUsage: number
    modelName: string
  }> {
    try {
      const startTime = Date.now()
      const response = await fetch(`${this.modelEndpoint}/api/tags`, {
        method: 'GET',
        timeout: 5000
      } as RequestInit & { timeout: number })

      const responseTime = Date.now() - startTime
      const isAvailable = response.ok
      
      return {
        isAvailable,
        modelLoaded: isAvailable,
        responseTime,
        memoryUsage: process.memoryUsage().heapUsed / 1024 / 1024, // MB
        modelName: this.modelName
      }
    } catch (error) {
      return {
        isAvailable: false,
        modelLoaded: false,
        responseTime: 0,
        memoryUsage: 0,
        modelName: this.modelName
      }
    }
  }

  // Save consultation to database
  async saveConsultation(userId: string, petId: string, input: AIConsultationInput, analysis: SymptomAnalysis) {
    try {
      await prisma.aiConsultation.create({
        data: {
          userId,
          petId,
          symptoms: input.symptoms,
          duration: input.duration,
          analysis: JSON.stringify(analysis),
          severity: analysis.severity,
          urgency: analysis.urgency,
          confidence: analysis.confidence,
          reasoning: analysis.reasoning,
          createdAt: new Date()
        }
      })
    } catch (error) {
      console.error('Failed to save consultation:', error)
    }
  }
}

export const aiService = AIService.getInstance()