// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credential-based auth
  isAdmin       Boolean   @default(false)
  
  // Subscription fields
  subscriptionTier String? @default("free") // "free", "premium"
  subscriptionId   String? // Stripe subscription ID
  subscriptionStatus String? @default("inactive") // "active", "inactive", "cancelled"
  subscriptionEndsAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  pets          Pet[]
  expenses      Expense[]
  appointments  Appointment[]
  reminders     Reminder[]
  documents     Document[]
  userFeatures  UserFeature[]
  aiConsultations AiConsultation[]
  payments      Payment[]
  subscriptions Subscription[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Pet {
  id              String    @id @default(cuid())
  name            String
  breed           String?
  species         String    // dog, cat, bird, etc.
  gender          String?   // male, female, unknown
  birthDate       DateTime?
  adoptionDate    DateTime?
  microchipNumber String?
  photo           String?   // URL or file path
  description     String?
  isActive        Boolean   @default(true)
  
  // Relationships
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  healthRecords   HealthRecord[]
  vaccinations    Vaccination[]
  medications     Medication[]
  appointments    Appointment[]
  feedingSchedules FeedingSchedule[]
  activities      Activity[]
  documents       Document[]
  expenses        Expense[]
  reminders       Reminder[]
  aiConsultations AiConsultation[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("pets")
}

model HealthRecord {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  vetName     String?
  diagnosis   String?
  treatment   String?
  notes       String?
  
  petId       String
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("health_records")
}

model Vaccination {
  id            String   @id @default(cuid())
  vaccineName   String
  dateGiven     DateTime
  nextDueDate   DateTime?
  batchNumber   String?
  vetName       String?
  notes         String?
  
  petId         String
  pet           Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("vaccinations")
}

model Medication {
  id            String   @id @default(cuid())
  medicationName String
  dosage        String
  frequency     String   // daily, twice daily, etc.
  startDate     DateTime
  endDate       DateTime?
  instructions  String?
  prescribedBy  String?
  isActive      Boolean  @default(true)
  
  petId         String
  pet           Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("medications")
}

model Appointment {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  duration    Int?     // minutes
  location    String?
  vetName     String?
  appointmentType String? // checkup, vaccination, surgery, etc.
  status      String   @default("scheduled") // scheduled, completed, cancelled
  
  petId       String
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("appointments")
}

model FeedingSchedule {
  id          String   @id @default(cuid())
  mealType    String   // breakfast, lunch, dinner, snack
  time        String   // HH:MM format
  foodType    String?
  amount      String?
  instructions String?
  isActive    Boolean  @default(true)
  
  petId       String
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("feeding_schedules")
}

model Activity {
  id          String   @id @default(cuid())
  activityType String  // walk, play, training, grooming
  duration    Int?     // minutes
  distance    Float?   // km
  date        DateTime
  notes       String?
  
  petId       String
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("activities")
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileName    String
  fileUrl     String
  fileType    String   // pdf, jpg, png, etc.
  category    String   // vaccination, adoption, insurance, etc.
  
  petId       String
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("documents")
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  amount      Float
  category    String   // food, vet, toys, grooming, etc.
  date        DateTime
  description String?
  receipt     String?  // URL to receipt image
  
  petId       String?
  pet         Pet?     @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("expenses")
}

model Reminder {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  reminderType String  // vaccination, appointment, medication, etc.
  isCompleted Boolean  @default(false)
  notifyBefore Int     @default(24) // hours before due date
  
  petId       String
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("reminders")
}

// Feature Management System
model Feature {
  id          String   @id @default(cuid())
  name        String   @unique // pets, health-tracking, appointments, etc.
  displayName String   // "Pet Management", "Health Tracking", etc.
  description String?
  category    String   // core, health, finance, social, etc.
  isEnabled   Boolean  @default(true)
  isCore      Boolean  @default(false) // core features cannot be disabled
  config      String?  // JSON configuration for the feature
  version     String   @default("1.0.0")
  
  userFeatures UserFeature[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("features")
}

model UserFeature {
  id        String  @id @default(cuid())
  userId    String
  featureId String
  isEnabled Boolean @default(true)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([userId, featureId])
  @@map("user_features")
}

// AI Vet Consultation System
model AiConsultation {
  id        String   @id @default(cuid())
  userId    String
  petId     String
  symptoms  String
  duration  String
  photos    String?  // JSON array of photo URLs
  analysis  String   // JSON of the AI analysis result
  severity  String   // "low", "medium", "high", "emergency"
  urgency   Int      // 1-10 scale
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet  Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("ai_consultations")
}

// Subscription Management
model Subscription {
  id                String    @id @default(cuid())
  userId            String    @unique
  stripeCustomerId  String?   @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  status            String    // "active", "inactive", "cancelled", "past_due"
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Payment History
model Payment {
  id               String   @id @default(cuid())
  userId           String
  stripePaymentId  String   @unique
  amount           Float
  currency         String   @default("usd")
  status           String   // "succeeded", "pending", "failed"
  description      String?
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// System Settings
model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String
  category    String   // ai_vet, subscription, limits, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}
